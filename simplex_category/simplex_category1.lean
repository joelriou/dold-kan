import algebraic_topology.simplex_category
import category_theory.limits.shapes.images
import category_theory.limits.shapes.strong_epi
universes u v

open category_theory
open category_theory.category
open category_theory.limits

namespace simplex_category

instance {n : ‚Ñï} {i : fin (n+2)} : mono (Œ¥ i) :=
begin
  rw mono_iff_injective,
  exact fin.succ_above_right_injective,
end

instance {n : ‚Ñï} {i : fin (n+1)} : epi (œÉ i) :=
begin
  rw epi_iff_surjective,
  intro b,
  simp only [œÉ, mk_hom, hom.to_order_hom_mk, order_hom.coe_fun_mk],
  by_cases b ‚â§ i,
  { use b,
    rw fin.pred_above_below i b (by simpa only [fin.coe_eq_cast_succ] using h),
    simp only [fin.coe_eq_cast_succ, fin.cast_pred_cast_succ], },
  { use b.succ,
    rw [fin.pred_above_above i b.succ _, fin.pred_succ],
    rw not_le at h,
    rw fin.lt_iff_coe_lt_coe at h ‚ä¢,
    simpa only [fin.coe_succ, fin.coe_cast_succ] using nat.lt.step h, }
end

lemma bijective_of_mono_and_eq {x y : simplex_category.{u}} (i : x ‚ü∂ y) [mono i]
  (hxy : x = y) : function.bijective i.to_order_hom :=
by simpa only [fintype.bijective_iff_injective_and_card i.to_order_hom,
    ‚Üê mono_iff_injective, hxy, and_true, eq_self_iff_true]

lemma bijective_of_epi_and_eq {x y : simplex_category.{u}} (e : x ‚ü∂ y) [epi e]
  (hxy : x = y) : function.bijective e.to_order_hom :=
by simpa only [fintype.bijective_iff_surjective_and_card e.to_order_hom,
    ‚Üê epi_iff_surjective, hxy, and_true, eq_self_iff_true]

@[simps]
noncomputable def iso_of_bijective {x y : simplex_category.{u}} {f : x ‚ü∂ y}
  (hf : function.bijective (f.to_order_hom.to_fun)) : x ‚âÖ y :=
{ hom := f,
  inv := hom.mk
    { to_fun := function.inv_fun f.to_order_hom.to_fun,
      monotone' := Œª y‚ÇÅ y‚ÇÇ h, begin
        by_cases h' : y‚ÇÅ < y‚ÇÇ,
        { by_contradiction h'',
          have ineq := f.to_order_hom.monotone' (le_of_not_ge h''),
          have eq := Œª i, function.inv_fun_eq (function.bijective.surjective hf i),
          simp only at eq,
          simp only [eq] at ineq,
          exact not_le.mpr h' ineq, },
        { rw eq_of_le_of_not_lt h h', }
      end, },
  hom_inv_id' := begin
    ext1, ext1, ext1 i,
    apply function.left_inverse_inv_fun (function.bijective.injective hf),
  end,
  inv_hom_id' := begin
    ext1, ext1, ext1 i,
    apply function.right_inverse_inv_fun (function.bijective.surjective hf),
  end, }

lemma is_iso_of_bijective {x y : simplex_category.{u}} {f : x ‚ü∂ y}
  (hf : function.bijective (f.to_order_hom.to_fun)) : is_iso f :=
begin
  rw [show f = (iso_of_bijective hf).hom, by simp only [iso_of_bijective_hom]],
  apply_instance,
end

@[simp]
def order_iso_of_iso {x y : simplex_category.{u}} (e : x ‚âÖ y) :
  fin (x.len+1) ‚âÉo fin (y.len+1) :=
equiv.to_order_iso
  { to_fun    := e.hom.to_order_hom,
    inv_fun   := e.inv.to_order_hom,
    left_inv  := Œª i, by simpa only using congr_arg (Œª œÜ, (hom.to_order_hom œÜ) i) e.hom_inv_id',
    right_inv := Œª i, by simpa only using congr_arg (Œª œÜ, (hom.to_order_hom œÜ) i) e.inv_hom_id', }
  e.hom.to_order_hom.monotone e.inv.to_order_hom.monotone

lemma iso_eq_iso_refl {x : simplex_category.{u}} (e : x ‚âÖ x) :
  e = iso.refl x :=
begin
  have h : (finset.univ : finset (fin (x.len+1))).card = x.len+1 := finset.card_fin (x.len+1),
  have eq‚ÇÅ := finset.order_emb_of_fin_unique' h
    (Œª i, finset.mem_univ ((order_iso_of_iso e) i)),
  have eq‚ÇÇ := finset.order_emb_of_fin_unique' h
    (Œª i, finset.mem_univ ((order_iso_of_iso (iso.refl x)) i)),
  ext1, ext1,
  convert congr_arg (Œª œÜ, (order_embedding.to_order_hom œÜ)) (eq‚ÇÅ.trans eq‚ÇÇ.symm),
  ext1, ext1 i,
  refl,
end

lemma eq_to_iso_of_iso {x y : simplex_category.{u}} (e : x ‚âÖ y) :
  e = eq_to_iso (skeletal (nonempty.intro e)) :=
by { have h := skeletal (nonempty.intro e), subst h, dsimp, exact iso_eq_iso_refl e, }

lemma eq_eq_to_hom_of_is_iso {x y : simplex_category.{u}} {f : x ‚ü∂ y} (hf : is_iso f) :
  f = eq_to_hom (skeletal (nonempty.intro (as_iso f))) :=
congr_arg (Œª (œÜ : _ ‚âÖ _), œÜ.hom) (eq_to_iso_of_iso (as_iso f))

lemma eq_id_of_is_iso {x : simplex_category.{u}} {f : x ‚ü∂ x} (hf : is_iso f) : f = ùüô _ :=
by simpa only using eq_eq_to_hom_of_is_iso hf

lemma eq_to_hom_eq {Œî Œî' : simplex_category.{u}} (e : Œî = Œî') (k : fin (Œî.len+1)):
  (hom.to_order_hom (eq_to_hom e)) k =
  ‚ü®k.val, by { rw ‚Üê e, exact fin.is_lt k, }‚ü©  :=
begin
  subst e,
  simp only [hom.id, order_hom.id_coe, fin.val_eq_coe, id.def, hom.to_order_hom_mk,
    eq_to_hom_refl, fin.eta, small_category_id],
end

lemma factorisation_non_injective' {n : ‚Ñï} {Œî' : simplex_category} (Œ∏ : mk (n+1) ‚ü∂ Œî')
  (i : fin (n+1)) (hi : Œ∏.to_order_hom i.cast_succ = Œ∏.to_order_hom i.succ):
  ‚àÉ (Œ∏' : mk n ‚ü∂ Œî'), Œ∏ = œÉ i ‚â´ Œ∏' :=
begin
  use Œ¥ i.succ ‚â´ Œ∏,
  ext1, ext1, ext1 x,
  simp only [hom.to_order_hom_mk, function.comp_app, order_hom.comp_coe,
    hom.comp, small_category_comp, œÉ, mk_hom, order_hom.coe_fun_mk],
  by_cases h' : x ‚â§ i.cast_succ,
  { rw fin.pred_above_below i x h',
    have eq := fin.cast_succ_cast_pred (gt_of_gt_of_ge (fin.cast_succ_lt_last i) h'),
    erw fin.succ_above_below i.succ x.cast_pred _, swap,
    { rwa [eq, ‚Üê fin.le_cast_succ_iff], },
    rw eq, },
  { simp only [not_le] at h',
    let y := x.pred (begin
      intro h,
      rw h at h',
      simpa only [fin.lt_iff_coe_lt_coe, nat.not_lt_zero, fin.coe_zero] using h',
    end),
    simp only [show x = y.succ, by rw fin.succ_pred] at h' ‚ä¢,
    rw [fin.pred_above_above i y.succ h', fin.pred_succ],
    by_cases h'' : y = i,
    { rw h'',
      convert hi.symm,
      erw fin.succ_above_below i.succ _,
      exact fin.lt_succ, },
    { erw fin.succ_above_above i.succ _,
      simp only [fin.lt_iff_coe_lt_coe, fin.le_iff_coe_le_coe,
        fin.coe_succ, fin.coe_cast_succ, nat.lt_succ_iff] at h' ‚ä¢,
      simp only [fin.ext_iff] at h'',
      cases nat.le.dest h' with c hc,
      cases c,
      { exfalso,
        rw [add_zero] at hc,
        rw [hc] at h'',
        exact h'' rfl, },
      { rw ‚Üê hc,
        simp only [add_le_add_iff_left, nat.succ_eq_add_one,
          le_add_iff_nonneg_left, zero_le], }, }, }
end

lemma fin.cast_succ_lt_iff_succ_le {n : ‚Ñï} {i : fin n} {j : fin (n+1)} : i.cast_succ < j ‚Üî i.succ ‚â§ j :=
begin
  simp only [fin.lt_iff_coe_lt_coe, fin.le_iff_coe_le_coe, fin.coe_succ, fin.coe_cast_succ],
  exact nat.lt_iff_add_one_le,
end

lemma factorisation_non_injective {n : ‚Ñï} {Œî' : simplex_category} (Œ∏ : mk (n+1) ‚ü∂ Œî')
  (hŒ∏ : ¬¨function.injective Œ∏.to_order_hom) :
  ‚àÉ (i : fin (n+1)) (Œ∏' : (mk n) ‚ü∂ Œî'), Œ∏ = œÉ i ‚â´ Œ∏' :=
begin
  simp only [function.injective, exists_prop, not_forall] at hŒ∏,
  -- as Œ∏ is not injective, there exists `x<y` such that `Œ∏ x = Œ∏ y`
  -- and then, `Œ∏ x = Œ∏ (x+1)`
  have hŒ∏‚ÇÇ : ‚àÉ (x y : fin (n+2)), (hom.to_order_hom Œ∏) x = (hom.to_order_hom Œ∏) y ‚àß x<y,
  { rcases hŒ∏ with ‚ü®x, y, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©,
    by_cases x<y,
    { exact ‚ü®x, y, ‚ü®h‚ÇÅ, h‚ü©‚ü©, },
    { refine ‚ü®y, x, ‚ü®h‚ÇÅ.symm, _‚ü©‚ü©,
      cases lt_or_eq_of_le (not_lt.mp h) with h' h',
      { exact h', },
      { exfalso,
        exact h‚ÇÇ h'.symm, }, }, },
  rcases hŒ∏‚ÇÇ with ‚ü®x, y, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©,
  let z := x.cast_pred,
  simp only [‚Üê (show z.cast_succ = x,
    by exact fin.cast_succ_cast_pred (lt_of_lt_of_le h‚ÇÇ (fin.le_last y)))] at h‚ÇÅ h‚ÇÇ,
  use z,
  apply factorisation_non_injective',
  rw fin.cast_succ_lt_iff_succ_le at h‚ÇÇ,
  apply le_antisymm,
  { exact Œ∏.to_order_hom.monotone (le_of_lt (fin.cast_succ_lt_succ z)), },
  { rw h‚ÇÅ,
    exact Œ∏.to_order_hom.monotone h‚ÇÇ, },
end

lemma factorisation_non_surjective' {n : ‚Ñï} {Œî : simplex_category} (Œ∏ : Œî ‚ü∂ mk (n+1))
  (i : fin (n+2)) (hi : ‚àÄ x, Œ∏.to_order_hom x ‚â† i) :
  ‚àÉ (Œ∏' : Œî ‚ü∂ (mk n)), Œ∏ = Œ∏' ‚â´ Œ¥ i :=
begin
  by_cases i < fin.last (n+1),
  { use Œ∏ ‚â´ œÉ (fin.cast_pred i),
    ext1, ext1, ext1 x,
    simp only [hom.to_order_hom_mk, function.comp_app,
      order_hom.comp_coe, hom.comp, small_category_comp],
    by_cases h' : Œ∏.to_order_hom x ‚â§ i,
    { simp only [œÉ, mk_hom, hom.to_order_hom_mk, order_hom.coe_fun_mk],
      erw fin.pred_above_below (fin.cast_pred i) (Œ∏.to_order_hom x)
        (by simpa [fin.cast_succ_cast_pred h] using h'),
      erw fin.succ_above_below i, swap,
      { simp only [fin.lt_iff_coe_lt_coe, fin.coe_cast_succ],
        exact lt_of_le_of_lt (fin.coe_cast_pred_le_self _)
          (fin.lt_iff_coe_lt_coe.mp ((ne.le_iff_lt (hi x)).mp h')), },
      rw fin.cast_succ_cast_pred,
      apply lt_of_le_of_lt h' h, },
    { simp only [not_le] at h',
      simp only [œÉ, mk_hom, hom.to_order_hom_mk, order_hom.coe_fun_mk],
      erw fin.pred_above_above (fin.cast_pred i) (Œ∏.to_order_hom x)
        (by simpa only [fin.cast_succ_cast_pred h] using h'),
      erw fin.succ_above_above i, swap,
      { rw fin.le_iff_coe_le_coe,
        simp only [fin.coe_cast_succ, fin.coe_pred],
        exact nat.le_pred_of_lt (fin.lt_iff_coe_lt_coe.mp h'), },
      rw fin.succ_pred, }, },
  { have h' := le_antisymm (fin.le_last i) (not_lt.mp h),
    subst h',
    use Œ∏ ‚â´ œÉ (fin.last _),
    ext1, ext1, ext1 x,
    simp only [hom.to_order_hom_mk, function.comp_app,
      order_hom.comp_coe, hom.comp, small_category_comp,
      œÉ, Œ¥, mk_hom, order_hom.coe_fun_mk,
      order_embedding.to_order_hom_coe,
      fin.pred_above_last, fin.succ_above_last],
    rw [fin.cast_succ_cast_pred],
    exact (ne.le_iff_lt (hi x)).mp (fin.le_last _), },
end

lemma factorisation_non_surjective {n : ‚Ñï} {Œî : simplex_category} (Œ∏ : Œî ‚ü∂ mk (n+1))
  (hŒ∏ : ¬¨function.surjective Œ∏.to_order_hom) :
  ‚àÉ (i : fin (n+2)) (Œ∏' : Œî ‚ü∂ (mk n)), Œ∏ = Œ∏' ‚â´ Œ¥ i :=
begin
  cases not_forall.mp hŒ∏ with i hi,
  rw not_exists at hi,
  use i,
  exact factorisation_non_surjective' Œ∏ i hi,
end

lemma epi_eq_œÉ {n : ‚Ñï} (Œ∏ : mk (n+1) ‚ü∂ mk n) [epi Œ∏] :
  ‚àÉ (i : fin (n+1)), Œ∏ = œÉ i :=
begin
  rcases factorisation_non_injective Œ∏ _ with ‚ü®i, Œ∏', h‚ü©, swap,
  { by_contradiction,
    simpa only [nat.one_ne_zero, add_le_iff_nonpos_right, nonpos_iff_eq_zero]
      using le_of_mono (mono_iff_injective.mpr h), },
  use i,
  haveI : epi (œÉ i ‚â´ Œ∏'),
  { rw ‚Üê h,
    apply_instance, },
  haveI := category_theory.epi_of_epi (œÉ i) Œ∏',
  rw [h, eq_id_of_is_iso (is_iso_of_bijective (bijective_of_epi_and_eq Œ∏' rfl)), comp_id],
end

lemma mono_eq_Œ¥ {n : ‚Ñï} (Œ∏ : mk n ‚ü∂ mk (n+1)) [mono Œ∏] :
  ‚àÉ (i : fin (n+2)), Œ∏ = Œ¥ i :=
begin
  rcases factorisation_non_surjective Œ∏ _ with ‚ü®i, Œ∏', h‚ü©, swap,
  { by_contradiction,
    simpa only [add_le_iff_nonpos_right, nonpos_iff_eq_zero]
      using le_of_epi (epi_iff_surjective.mpr h), },
  use i,
  haveI : mono (Œ∏' ‚â´ Œ¥ i),
  { rw ‚Üê h,
    apply_instance, },
  haveI := category_theory.mono_of_mono Œ∏' (Œ¥ i),
  rw [h, eq_id_of_is_iso (is_iso_of_bijective (bijective_of_mono_and_eq Œ∏' rfl)), id_comp],
end

end simplex_category
