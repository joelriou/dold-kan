/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.dold_kan.functoriality_additive
import for_mathlib.dold_kan.equivalence_pseudoabelian

/-!

# Functoriality of the Dold-Kan correspondence for pseudoabelian categories

-/

noncomputable theory

open category_theory
open category_theory.idempotents
open category_theory.limits
open algebraic_topology

variables {C D : Type*} [category C] [category D]
  [preadditive C] [preadditive D] [has_finite_coproducts C] [has_finite_coproducts D]
  [is_idempotent_complete C] [is_idempotent_complete D]

variables (F : C ‚•§ D) [functor.additive F]

namespace category_theory

namespace idempotents

namespace dold_kan

/-- Functoriality property of the inverse functor
  `Œ∫equiv'.inverse : karoubi (chain_complex C ‚Ñï) ‚•§ chain_complex C ‚Ñï` for two categories
  `C` and `D` and a functor `F : C ‚•§ D`. This is deduced by the similar equality of
  functors `preadditive.dold_kan.functor_karoubi_homological_complex_compat` for the
  functors `Œ∫equiv'.functor`. -/
def functoriality_Œ∫inv' :
  F.map_karoubi_homological_complex _ ‚ãô (to_karoubi_equivalence (chain_complex _ ‚Ñï)).inverse
  ‚âÖ (to_karoubi_equivalence _).inverse ‚ãô functor.map_homological_complex F (complex_shape.down ‚Ñï) :=
begin
  calc (F.map_karoubi_homological_complex _ ‚ãô (to_karoubi_equivalence (chain_complex _ ‚Ñï)).inverse)
    ‚âÖ ùü≠ _ ‚ãô (F.map_karoubi_homological_complex _ ‚ãô (to_karoubi_equivalence _).inverse) :
          by refl
  ... ‚âÖ ((to_karoubi_equivalence _).inverse ‚ãô (to_karoubi_equivalence _).functor) ‚ãô
      (F.map_karoubi_homological_complex _ ‚ãô (to_karoubi_equivalence _).inverse) :
        iso_whisker_right (to_karoubi_equivalence _).counit_iso.symm _
  ... ‚âÖ (to_karoubi_equivalence _).inverse ‚ãô ((to_karoubi_equivalence _).functor ‚ãô
      F.map_karoubi_homological_complex _) ‚ãô (to_karoubi_equivalence _).inverse : by refl
  ... ‚âÖ (to_karoubi_equivalence _).inverse ‚ãô
    (functor.map_homological_complex F (complex_shape.down ‚Ñï) ‚ãô (to_karoubi_equivalence _).functor) ‚ãô
    (to_karoubi_equivalence _).inverse : iso_whisker_left _ (iso_whisker_right
        (eq_to_iso (F.map_homological_complex_karoubi_compatibility _)) _)
  ... ‚âÖ ((to_karoubi_equivalence _).inverse ‚ãô functor.map_homological_complex F (complex_shape.down ‚Ñï)) ‚ãô
    ((to_karoubi_equivalence _).functor ‚ãô (to_karoubi_equivalence _).inverse) : by refl
  ... ‚âÖ ((to_karoubi_equivalence _).inverse ‚ãô functor.map_homological_complex F (complex_shape.down ‚Ñï)) ‚ãô ùü≠ _ :
    iso_whisker_left _ (to_karoubi_equivalence _).unit_iso.symm
  ... ‚âÖ ((to_karoubi_equivalence _).inverse ‚ãô functor.map_homological_complex F (complex_shape.down ‚Ñï)) :
    functor.right_unitor _,
end

/-- Given an additive functor `F : A ‚•§ B` between pseudoabelian categories,
this is the functoriality isomorphism between the two functors
`simplicial_object A ‚•§ chain_complex B ‚Ñï` obtained by using the functors
induced by `F` and the functor `N` in `A` or in `B`. -/
def functoriality_N : (simplicial_object.whiskering C D).obj F ‚ãô N ‚âÖ
  N ‚ãô functor.map_homological_complex F (complex_shape.down ‚Ñï) :=
begin
  calc (simplicial_object.whiskering C D).obj F ‚ãô N
    ‚âÖ (dold_kan.N‚ÇÅ ‚ãô F.map_karoubi_homological_complex _) ‚ãô
      (to_karoubi_equivalence _).inverse : iso_whisker_right (eq_to_iso (preadditive.dold_kan.functoriality_N‚ÇÅ F)) _
  ... ‚âÖ dold_kan.N‚ÇÅ ‚ãô (F.map_karoubi_homological_complex _ ‚ãô
        (to_karoubi_equivalence _).inverse) : by refl
  ... ‚âÖ dold_kan.N‚ÇÅ ‚ãô ((to_karoubi_equivalence _).inverse ‚ãô
    functor.map_homological_complex F (complex_shape.down ‚Ñï)) :
        iso_whisker_left _ (functoriality_Œ∫inv' F)
  ... ‚âÖ N ‚ãô functor.map_homological_complex F (complex_shape.down ‚Ñï) : by refl,
end

/- TODO : show that `functoriality_N (ùü≠ C)` is `iso.refl _`, and that `functoriality_N`
satisfies a transitivity property when composing two functors `C ‚•§ D` and `D ‚•§ E`.
Note that in the additive case, `preadditive.dold_kan.functoriality_N` was an *equality*
of functors, so that associated `eq_to_iso _` isomorphisms automatically satisfy
the transitivity property. -/

end dold_kan

end idempotents

end category_theory
