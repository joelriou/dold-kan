/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.idempotents.karoubi

/-!
# Idempotence completeness and functor categories

-/

open category_theory
open category_theory.category
open category_theory.idempotents.karoubi
open category_theory.limits

namespace category_theory

namespace idempotents

variables {J : Type*} [category J]
variables {C : Type*} [category C]

instance [is_idempotent_complete C] : is_idempotent_complete (J ‚•§ C) :=
begin
	refine ‚ü®_‚ü©,
	intros F p hp,
	have hC := (is_idempotent_complete_iff_has_equalizer_of_id_and_idempotent C).mp infer_instance,
	haveI : ‚àÄ (j : J), has_equalizer (ùüô _) (p.app j) := Œª j, hC _ _ (congr_app hp j),
	let Y : J ‚•§ C :=
	{ obj := Œª j, limits.equalizer (ùüô _) (p.app j),
		map := Œª j j' œÜ, equalizer.lift (limits.equalizer.Œπ (ùüô _) (p.app j) ‚â´ F.map œÜ)
			(by rw [comp_id, assoc, p.naturality œÜ, ‚Üê assoc, ‚Üê limits.equalizer.condition, comp_id]),
		map_id' := Œª j, by { ext, simp only [comp_id, functor.map_id, equalizer.lift_Œπ, id_comp], },
		map_comp' := Œª j j' j'' œÜ œÜ', begin
			ext,
			simp only [assoc, functor.map_comp, equalizer.lift_Œπ, equalizer.lift_Œπ_assoc],
		end },
	let i : Y ‚ü∂ F :=
	{ app := Œª j, equalizer.Œπ _ _,
		naturality' := Œª j j' œÜ, by erw [equalizer.lift_Œπ],	},
	let e : F ‚ü∂ Y :=
	{ app := Œª j, equalizer.lift (p.app j)
			(by { rw comp_id, exact (congr_app hp j).symm, }),
		naturality' := Œª j j' œÜ, begin
			ext,
			simp only [assoc, equalizer.lift_Œπ, nat_trans.naturality, equalizer.lift_Œπ_assoc],
		end },
	use [Y, i, e],
	split,
	{ ext j,
		simp only [nat_trans.comp_app, assoc, equalizer.lift_Œπ, nat_trans.id_app, id_comp,
			‚Üê equalizer.condition, comp_id], },
	{ ext j,
		simp only [nat_trans.comp_app, equalizer.lift_Œπ], },
end

namespace karoubi_functor_category

@[simps]
def obj (P : karoubi (J ‚•§ C)) : J ‚•§ karoubi C :=
{ obj := Œª j, ‚ü®P.X.obj j, P.p.app j, congr_app P.idempotence j‚ü©,
	map := Œª j j' œÜ,
	{ f := P.p.app j ‚â´ P.X.map œÜ,
		comm := begin
			simp only [nat_trans.naturality, assoc],
     	have h := congr_app P.idempotence j,
     	rw [nat_trans.comp_app] at h,
     	slice_rhs 1 3 { erw [h, h], },
		end },
	map_id' := Œª j, by { ext, simp only [functor.map_id, comp_id, id_eq], },
	map_comp' := Œª j j' j'' œÜ œÜ', begin
		ext,
   	have h := congr_app P.idempotence j,
   	rw [nat_trans.comp_app] at h,
		simp only [assoc, nat_trans.naturality_assoc, functor.map_comp,
     	comp],
    slice_rhs 1 2 { rw h, },
 	  rw [assoc],
	end  }

@[simps]
def map {P Q : karoubi (J ‚•§ C)} (f : P ‚ü∂ Q) :
	obj P ‚ü∂ obj Q :=
{ app := Œª j, ‚ü®f.f.app j, congr_app f.comm j‚ü©,
	naturality' := Œª j j' œÜ, begin
		ext,
		simp only [comp],
    have h := congr_app (comp_p f) j,
    have h' := congr_app (p_comp f) j',
 	  dsimp at h h' ‚ä¢,
   	slice_rhs 1 2 { erw h, },
   	rw ‚Üê P.p.naturality,
   	slice_lhs 2 3 { erw h', },
   	rw f.f.naturality,
	end }

end karoubi_functor_category

variables (J) (C)

@[simps]
def karoubi_functor_category_embedding :
	karoubi (J ‚•§ C) ‚•§ (J ‚•§ karoubi C) :=
{ obj := karoubi_functor_category.obj,
	map := Œª P Q f, karoubi_functor_category.map f,
	map_id' := Œª P,
    by { ext j, simpa only [nat_trans.id_app, id_eq], },
	map_comp' := Œª P Q R f g,
		by { ext j, simpa only [comp, nat_trans.comp_app], } }

instance : full (karoubi_functor_category_embedding J C) :=
{ preimage := Œª P Q f,
  { f :=
    { app := Œª j, (f.app j).f,
      naturality' := Œª j j' œÜ, begin
				slice_rhs 1 1 { rw ‚Üê karoubi.comp_p, },
        have h := hom_ext.mp (f.naturality œÜ),
        simp only [comp] at h,
        dsimp [karoubi_functor_category_embedding] at h ‚ä¢,
        erw [assoc, ‚Üê h, ‚Üê P.p.naturality œÜ, assoc, p_comp (f.app j')],
      end },
    comm := by { ext j, exact (f.app j).comm, } },
  witness' := Œª P Q f, by { ext j, refl, }, }

instance : faithful (karoubi_functor_category_embedding J C) :=
{ map_injective' := Œª P Q f f' h, begin
    ext j,
		simp only [nat_trans.ext_iff, karoubi_functor_category_embedding_map,
			karoubi_functor_category.map] at h,
    simpa only using congr_fun h j,
  end, }

lemma to_karoubi_comp_karoubi_functor_category_embedding :
  (to_karoubi _) ‚ãô karoubi_functor_category_embedding J C =
	(whiskering_right J _ _).obj (to_karoubi C) :=
begin
  apply functor.ext,
  { intros X Y f,
    ext j,
    dsimp,
		simp only [to_karoubi_map_f, karoubi_functor_category.obj_obj_p, to_karoubi_obj_p,
			eq_to_hom_app, eq_to_hom_refl, id_eq, comp],
	  erw [id_comp, comp_id], },
  { intro X,
    apply functor.ext,
    { intros j j' œÜ,
      ext,
			dsimp,
			simpa only [comp_id, id_comp], },
    { intro j,
      refl, }, }
end

end idempotents

end category_theory
