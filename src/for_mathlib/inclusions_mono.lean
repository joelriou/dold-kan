/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.limits.shapes.finite_products
import category_theory.limits.shapes.zero_morphisms
import category_theory.limits.types
import category_theory.limits.mono_coprod

universe u

noncomputable theory

open category_theory category_theory.category category_theory.limits

namespace category_theory

namespace limits

variables {C : Type*} [category C] [has_finite_coproducts C]

variable {C}

namespace mono_coprod


namespace mono_inclusion_sub_coproduct

variables {I J : Type*} [fintype I] [decidable_eq I] [fintype J] [mono_coprod C] (X : I ‚Üí C) (Œ≥ : J ‚Üí I)
  (hŒ≥ : function.injective Œ≥)

def Œ± : sigma_obj (Œª j, X (Œ≥ j)) ‚ü∂ sigma_obj X := sigma.desc (Œª j, sigma.Œπ _ (Œ≥ j))
def Œ≤ : sigma_obj (Œª (k : (finset.image Œ≥ ‚ä§)·∂ú), X k) ‚ü∂ sigma_obj X := sigma.desc (Œª k, sigma.Œπ _ k)
def œÜ := coprod.desc (Œ± X Œ≥) (Œ≤ X Œ≥)
def index (i : I) (hi : i ‚àà finset.image Œ≥ ‚ä§) : J := (finset.mem_image.mp hi).some
lemma index_cond (i : I) (hi : i ‚àà finset.image Œ≥ ‚ä§) : i = Œ≥ (index Œ≥ i hi) :=
(finset.mem_image.mp hi).some_spec.some_spec.symm

include hŒ≥

lemma index_eq (i : I) (j : J) (hj : i = Œ≥ j) : index Œ≥ i (by { simp only [finset.mem_image],
  exact ‚ü®j, finset.mem_univ j, hj.symm‚ü©, }) = j :=
begin
  apply hŒ≥,
  rw [‚Üê index_cond Œ≥ i, hj],
end

omit hŒ≥

def œà‚ÇÅ (i : I) (hi : i ‚àà finset.image Œ≥ ‚ä§) : X i ‚ü∂ sigma_obj (Œª j, X (Œ≥ j)) :=
eq_to_hom (by { congr, exact index_cond Œ≥ i hi,}) ‚â´ sigma.Œπ _ (index Œ≥ i hi)

lemma sigma.congr_Œπ {J D : Type*} [category D] (F : J ‚Üí D) [has_coproduct F]
  (a b : J) (h : a = b) : eq_to_hom (by rw h) ‚â´ sigma.Œπ F a = sigma.Œπ F b :=
by { subst h, simp only [eq_to_hom_refl, id_comp], }

include hŒ≥

lemma œà‚ÇÅ_eq_Œπ (j : J) : œà‚ÇÅ X Œ≥ (Œ≥ j) (by { rw finset.mem_image, exact ‚ü®j, finset.mem_univ _, rfl‚ü©}) =
  sigma.Œπ _ j :=
sigma.congr_Œπ (Œª (j : J), X (Œ≥ j)) (index Œ≥ (Œ≥ j) _) j (index_eq Œ≥ hŒ≥ (Œ≥ j) j rfl)

omit hŒ≥

def œà‚ÇÇ (i : I) (hi : ¬¨ i ‚àà (finset.image Œ≥ ‚ä§)) :
  X i ‚ü∂ sigma_obj (Œª (k : (finset.image Œ≥ ‚ä§)·∂ú), X k) :=
sigma.Œπ (Œª (k : (finset.image Œ≥ ‚ä§)·∂ú), X k) ‚ü®i, by simpa only [finset.mem_compl] using hi‚ü©

def œà : sigma_obj X ‚ü∂ sigma_obj (Œª j, X (Œ≥ j)) ‚®ø sigma_obj (Œª (k : (finset.image Œ≥ ‚ä§)·∂ú), X k) :=
sigma.desc (Œª i, begin
  by_cases hi : i ‚àà finset.image Œ≥ finset.univ,
  { exact œà‚ÇÅ X Œ≥ i hi ‚â´ coprod.inl, },
  { exact œà‚ÇÇ X Œ≥ i hi ‚â´ coprod.inr, },
end)

include hŒ≥
@[simps]
def iso : sigma_obj (Œª j, X (Œ≥ j)) ‚®ø sigma_obj (Œª (k : (finset.image Œ≥ ‚ä§)·∂ú), X k) ‚âÖ sigma_obj X :=
{ hom := œÜ X Œ≥,
  inv := œà X Œ≥,
  hom_inv_id' := begin
    dsimp only [œÜ, œà, Œ±, Œ≤],
    ext; discrete_cases,
    { rw [coprod.inl_desc_assoc, colimit.Œπ_desc_assoc, cofan.mk_Œπ_app, colimit.Œπ_desc,
        cofan.mk_Œπ_app, comp_id],
      dsimp,
      rw dif_pos, swap,
      { simp only [finset.mem_image],
        exact ‚ü®j, finset.mem_univ _, rfl‚ü©, },
      erw œà‚ÇÅ_eq_Œπ X Œ≥ hŒ≥ j, },
    { rw [coprod.inr_desc_assoc, colimit.Œπ_desc_assoc, cofan.mk_Œπ_app, colimit.Œπ_desc,
        cofan.mk_Œπ_app, comp_id],
      dsimp,
      rw dif_neg, swap,
      { simpa only [finset.mem_compl] using j.2, },
      dsimp [œà‚ÇÇ],
      congr,
      simp only [finset.mk_coe], },
  end,
  inv_hom_id' := begin
    dsimp only [œÜ, œà, Œ±, Œ≤],
    ext,
    discrete_cases,
    simp only [colimit.Œπ_desc_assoc, cofan.mk_Œπ_app, comp_id],
    dsimp only,
    split_ifs with hj,
    { simp [finset.mem_image] at hj,
      rcases hj with ‚ü®i, hi‚ü©,
      subst hi,
      erw œà‚ÇÅ_eq_Œπ X Œ≥ hŒ≥ i,
      tidy },
    { dsimp [œà‚ÇÇ],
      erw [category.assoc, coprod.inr_desc, colimit.Œπ_desc, cofan.mk_Œπ_app],
      refl, },
  end, }

end mono_inclusion_sub_coproduct

section

variables {I J : Type*} [fintype I] [fintype J] [mono_coprod C]
  (X : I ‚Üí C) (Œ≥ : J ‚Üí I)

@[simp]
def map_coproduct : sigma_obj (Œª j, X (Œ≥ j)) ‚ü∂ sigma_obj X := sigma.desc (Œª j, sigma.Œπ _ (Œ≥ j))

lemma mono_inclusion_sub_coproduct (hŒ≥ : function.injective Œ≥) : mono (map_coproduct X Œ≥) :=
begin
  classical,
  let Œ± : sigma_obj (Œª j, X (Œ≥ j)) ‚ü∂ sigma_obj X := sigma.desc
    (Œª j, sigma.Œπ X (Œ≥ j)),
  change mono Œ±,
  rw [show Œ± = coprod.inl ‚â´ (mono_inclusion_sub_coproduct.iso X Œ≥ hŒ≥).hom, by tidy],
  apply mono_comp,
end

end

instance mono_sigma_Œπ {I : Type*} [fintype I] [mono_coprod C] (X : I ‚Üí C) (i : I):
  mono (sigma.Œπ X i) :=
begin
  let Œ≥ : fin 1 ‚Üí I := Œª x, i,
  have hŒ≥ : function.injective Œ≥ := Œª x‚ÇÅ x‚ÇÇ h, subsingleton.elim _ _,
  let e : X i ‚âÖ (‚àê Œª (j : fin 1), X (Œ≥ j)) :=
  { hom := sigma.Œπ (Œª (j : fin 1), X (Œ≥ j)) 0,
    inv := sigma.desc (Œª j, ùüô _),
    hom_inv_id' := by tidy,
    inv_hom_id' := by { ext, discrete_cases, tidy, }, },
  haveI := mono_inclusion_sub_coproduct X Œ≥ hŒ≥,
  convert (mono_comp _ _ : mono (e.hom ‚â´ map_coproduct X Œ≥)),
  simp only [map_coproduct, colimit.Œπ_desc, cofan.mk_Œπ_app],
end

end mono_coprod

end limits

end category_theory
