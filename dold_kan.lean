/-
Copyright (c) 2021 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jo√´l Riou
-/

import algebra.homology.homological_complex
import algebra.homology.homotopy
import algebra.big_operators.basic
import algebraic_topology.simplicial_object
import algebraic_topology.alternating_face_map_complex

open category_theory
open category_theory.limits
open category_theory.subobject
open category_theory.preadditive
open category_theory.simplicial_object
open category_theory.category
open opposite

open_locale big_operators
open_locale simplicial

noncomputable theory

namespace algebraic_topology

namespace dold_kan

variables {C : Type*} [category C] [preadditive C]
variables {X : simplicial_object C}

/- general stuff of homotopies -/

@[simp]
def null_homotopic_chain_complex_map_f {K L : chain_complex C ‚Ñï}
  (h : Œ† (n : ‚Ñï), K.X n ‚ü∂ L.X (n+1)) : Œ† (n : ‚Ñï), K.X n ‚ü∂ L.X n
| 0 := h 0 ‚â´ L.d 1 0
| (n+1) := h (n+1) ‚â´ L.d (n+2) (n+1) + K.d (n+1) n ‚â´ h n

@[simps]
def null_homotopic_chain_complex_map {K L : chain_complex C ‚Ñï}
  (h : Œ† (n : ‚Ñï), K.X n ‚ü∂ L.X (n+1)) : K ‚ü∂ L :=
{ f := null_homotopic_chain_complex_map_f h,
  comm' := Œª i j, begin
    rw complex_shape.down_rel,
    intro hij,
    cases j;
    { rw ‚Üê hij, simp, },
  end }

@[simp]
def null_homotopic_chain_complex_map_hom {K L : chain_complex C ‚Ñï}
  (h : Œ† (n : ‚Ñï), K.X n ‚ü∂ L.X (n+1)) (i j : ‚Ñï) : K.X i ‚ü∂ L.X j :=
begin
  by_cases hij : i+1=j,
  { exact h i ‚â´ (eq_to_hom (by { congr, assumption, }) : L.X (i+1) ‚ü∂ L.X j) },
  { exact 0 },
end

def homotopy_of_null_homotopic_chain_complex_map {K L : chain_complex C ‚Ñï}
  (h : Œ† (n : ‚Ñï), K.X n ‚ü∂ L.X (n+1)) :
  homotopy (null_homotopic_chain_complex_map h) 0 :=
{ hom := null_homotopic_chain_complex_map_hom h,
  zero' := Œª i j hij, begin
    rw complex_shape.down_rel at hij,
    simp only [null_homotopic_chain_complex_map_hom, dite_eq_right_iff],
    intro hij',
    exfalso,
    exact hij hij',
  end,
  comm := Œª n, begin
    cases n,
    { simp, },
    { simp, apply add_comm, }
  end }

/- construction of homotopies -/

def hœÉ (q : ‚Ñï) (n : ‚Ñï) : X _[n] ‚ü∂ X _[n+1] := if n<q then 0
  else (-1 : ‚Ñ§)^(n-q) ‚Ä¢ X.œÉ (fin.mk (n-q) (nat.sub_lt_succ n q))

@[simp]
lemma hŒ¥_eq_zero (q : ‚Ñï) (n : ‚Ñï) (hnq : n<q) : (hœÉ q n : X _[n] ‚ü∂ X _[n+1])= 0 :=
begin
  unfold hœÉ,
  simp only [fin.mk_eq_subtype_mk, ite_eq_left_iff],
  intro h,
  exfalso,
  exact h hnq,
end

@[simp]
lemma hœÉ_eq (q n a : ‚Ñï) (ha : a+q=n) :
  (hœÉ q n : X _[n] ‚ü∂ X _[n+1]) = (-1 : ‚Ñ§)^a ‚Ä¢ X.œÉ (fin.mk a (nat.lt_succ_iff.mpr (nat.le.intro ha))) :=
begin
  unfold hœÉ,
  simp only [not_lt, fin.mk_eq_subtype_mk, ite_eq_left_iff],
  split_ifs,
  { exfalso, linarith, },
  { congr; exact tsub_eq_of_eq_add (eq.symm ha), }
end

@[simp]
def HœÉ (q : ‚Ñï) : (alternating_face_map_complex C).obj X ‚ü∂
  (alternating_face_map_complex C).obj X :=
null_homotopic_chain_complex_map (hœÉ q)

/- definition of the projector P -/

@[simp]
def P : ‚Ñï ‚Üí ((alternating_face_map_complex C).obj X ‚ü∂ 
(alternating_face_map_complex C).obj X)
| 0     := ùüô _
| (q+1) := P q ‚â´ (ùüô _ - HœÉ q)

end dold_kan

end algebraic_topology

