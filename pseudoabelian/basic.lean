/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import category_theory.preadditive.additive_functor
import category_theory.additive.basic
import category_theory.limits.shapes.biproducts
import category_theory.equivalence

/-!
# Pseudoabelian categories

-/

noncomputable theory

open category_theory
open category_theory.category
open category_theory.preadditive
open category_theory.limits
open_locale big_operators


namespace category_theory

namespace pseudoabelian

variables (C : Type*) [category C] [preadditive C]

@[nolint has_inhabited_instance]
structure karoubi := (X : C) (p : X ‚ü∂ X) (idempotence : p ‚â´ p = p)

class is_pseudoabelian : Prop :=
(idempotents_have_kernels : Œ† (P : karoubi C), has_kernel P.p)

namespace karoubi

variables {C}

@[ext]
lemma ext {P Q : karoubi C} (h_X : P.X = Q.X)
  (h_p : P.p ‚â´ eq_to_hom h_X = eq_to_hom h_X ‚â´ Q.p) : P = Q :=
begin
  cases P,
  cases Q,
  dsimp at h_X h_p,
  subst h_X,
  simpa only [true_and, eq_self_iff_true, id_comp, eq_to_hom_refl,
    heq_iff_eq, comp_id] using h_p,
end

@[simps]
def idempotent_of_id_sub_idempotent (P : karoubi C) : karoubi C :=
{ X := P.X,
  p := ùüô _ - P.p,
  idempotence := by simp only [comp_sub, sub_comp, id_comp, comp_id, P.idempotence,
    sub_self, sub_zero], }

@[ext]
structure hom (P Q : karoubi C) := (f : P.X ‚ü∂ Q.X) (comm : f = P.p ‚â´ f ‚â´ Q.p)

instance (P Q : karoubi C) : inhabited (hom P Q) := ‚ü®‚ü®0, by rw [zero_comp, comp_zero]‚ü©‚ü©

@[ext]
lemma hom_ext {P Q : karoubi C} {f' g' : hom P Q} : f' = g' ‚Üî f'.f = g'.f :=
by { split; intro h, { congr, assumption, }, { ext, assumption, }, }

lemma p_comp {P Q : karoubi C} (f : hom P Q) : P.p ‚â´ f.1 = f.1 :=
by rw [f.2, ‚Üê assoc, P.idempotence]

lemma comp_p {P Q : karoubi C} (f : hom P Q) : f.1 ‚â´ Q.p = f.1 :=
by rw [f.2, assoc, assoc, Q.idempotence]

lemma p_comm {P Q : karoubi C} (f : hom P Q) : P.p ‚â´ f.1 = f.1 ‚â´ Q.p :=
by rw [p_comp, comp_p]

def comp_proof {P Q R : karoubi C} (g' : hom Q R) (f' : hom P Q) :
  f'.1 ‚â´ g'.1 = P.p ‚â´ (f'.1 ‚â´ g'.1) ‚â´ R.p :=
by rw [assoc, comp_p, ‚Üê assoc, p_comp]

end karoubi

instance : category (karoubi C) :=
{ hom      := karoubi.hom,
  id       := Œª P, ‚ü®P.p, by { repeat { rw P.idempotence, }, }‚ü©,
  comp     := Œª P Q R f' g', ‚ü®f'.1 ‚â´ g'.1, karoubi.comp_proof g' f'‚ü©,
  id_comp' := Œª P Q f', by { ext, simp only [karoubi.p_comp], },
  comp_id' := Œª P Q f', by { ext, simp only [karoubi.comp_p], },
  assoc'   := Œª P Q R S f' g' h', by { ext, simp only [category.assoc], }, }

namespace karoubi

@[simp]
lemma comp {P Q R : karoubi C} (f' : P ‚ü∂ Q) (g' : Q ‚ü∂ R) :
  f' ‚â´ g' = ‚ü®f'.1 ‚â´ g'.1, comp_proof g' f'‚ü© := by refl

@[simp]
lemma id_eq {P : karoubi C} : ùüô P = ‚ü®P.p, by repeat { rw P.idempotence, }‚ü© := by refl

instance coe : has_coe_t C (karoubi C) := ‚ü®Œª X, ‚ü®X, ùüô X, by rw comp_id‚ü©‚ü©

@[simp]
lemma coe_X (X : C) : (X : karoubi C).X = X := by refl

@[simp]
lemma coe_p (X : C) : (X : karoubi C).p = ùüô X := by refl

@[simp]
def eq_to_hom_f {P Q : karoubi C} (h : P = Q) :
  karoubi.hom.f (eq_to_hom h) = P.p ‚â´ eq_to_hom (congr_arg karoubi.X h) :=
by { subst h, simp only [eq_to_hom_refl, karoubi.id_eq, comp_id], }

end karoubi

@[simps]
def to_karoubi : C ‚•§ karoubi C := {
  obj := Œª X, ‚ü®X, ùüô X, by rw comp_id‚ü©,
  map := Œª X Y f, ‚ü®f, by simp only [comp_id, id_comp]‚ü© }

instance : full (to_karoubi C) := {
  preimage := Œª X Y f', f'.1,
  witness' := Œª X Y f', by { ext, simp only [to_karoubi_map_f], }, }

instance : faithful (to_karoubi C) := { }

variables {C}

@[simps]
instance {P Q : karoubi C} : add_comm_group (P ‚ü∂ Q) :=
{ add := Œª f' g', ‚ü®f'.1+g'.1, begin
    rw [add_comp, comp_add],
    congr',
    exact f'.2,
    exact g'.2,
  end‚ü©,
  zero := ‚ü®0, by simp only [comp_zero, zero_comp]‚ü©,
  zero_add := Œª f', by { ext, simp only [zero_add], },
  add_zero := Œª f', by { ext, simp only [add_zero], },
  add_assoc := Œª f' g' h', by simp only [add_assoc],
  add_comm := Œª f' g', by { ext, apply_rules [add_comm], },
  neg := Œª f', ‚ü®-f'.1, by simpa only [neg_comp, comp_neg, neg_inj] using f'.2‚ü©,
  add_left_neg := Œª f', by { ext, apply_rules [add_left_neg], }, }

namespace karoubi

lemma hom_eq_zero_iff {P Q : karoubi C} {f' : hom P Q} : f' = 0 ‚Üî f'.f = 0 := by tidy

@[simps]
def inclusion_hom (P Q : karoubi C) : add_monoid_hom (P ‚ü∂ Q) (P.X ‚ü∂ Q.X) :=
{ to_fun   := Œª f', f'.1,
  map_zero' := rfl,
  map_add'  := Œª f' g', rfl }

def sum_hom {P Q : karoubi C} {Œ± : Type*} (s : finset Œ±) (f : Œ± ‚Üí (P ‚ü∂ Q)) :
  (‚àë x in s, f x).1 = ‚àë x in s, (f x).1  := 
add_monoid_hom.map_sum (inclusion_hom P Q) f s

end karoubi

instance : preadditive (karoubi C) :=
{ hom_group := Œª P Q, by apply_instance,
  add_comp' := Œª P Q R f' g' h',
    by { ext, simp only [add_comp, quiver.hom.add_comm_group_add_f, karoubi.comp], },
  comp_add' := Œª P Q R f' g' h',
    by { ext, simp only [comp_add, quiver.hom.add_comm_group_add_f, karoubi.comp], }, }

instance : functor.additive (to_karoubi C) := { }

namespace karoubi

namespace biproducts

variables {C}
variables {J : Type*} [decidable_eq J] [fintype J] (F : J ‚Üí karoubi C)
variables [has_finite_biproducts C]

abbreviation biconeX := biproduct.bicone (Œª j, (F j).X)

abbreviation biconeX_p := biproduct.map (Œª j, (F j).p)

lemma biconeX_p_idempotence : biconeX_p F ‚â´ biconeX_p F = biconeX_p F :=
begin
  ext j,
  simp only [limits.biproduct.Œπ_map_assoc, limits.biproduct.Œπ_map],
  slice_lhs 1 2 { rw (F j).idempotence, },
end

@[simps]
def bicone : limits.bicone F :=
{ X :=
  { X := (biconeX F).X,
    p := (biconeX_p F),
      idempotence := biconeX_p_idempotence F, },
  œÄ := Œª j, ‚ü®biconeX_p F ‚â´ (biconeX F).œÄ j,
    by { simp only [limits.biproduct.map_œÄ_assoc, category.assoc,
      limits.biproduct.map_œÄ, (F j).idempotence], }‚ü©,
  Œπ := Œª j, ‚ü®(biconeX F).Œπ j ‚â´ biconeX_p F,
    by { simp only [limits.biproduct.Œπ_map, category.assoc],
      slice_rhs 1 3 { rw [(F j).idempotence, (F j).idempotence], }, }‚ü©,
  Œπ_œÄ := Œª j j', begin
    split_ifs,
    { subst h,
      simp only [limits.biproduct.bicone_Œπ, limits.biproduct.Œπ_map,
        limits.biproduct.bicone_œÄ, limits.biproduct.Œπ_œÄ_self_assoc,
        comp, category.assoc, eq_to_hom_refl,
      limits.biproduct.map_œÄ, id_eq, (F j).idempotence], },
    { simp only [comp],
      conv { to_lhs, congr, rw assoc, congr, skip, rw ‚Üê assoc, congr,
        rw biconeX_p_idempotence, },
      simp only [limits.biproduct.bicone_Œπ, limits.biproduct.bicone_œÄ,
        limits.biproduct.map_œÄ],
      conv { to_lhs, congr, rw ‚Üê assoc, congr, rw (biconeX F).Œπ_œÄ, },
      split_ifs,
      simp only [hom_eq_zero_iff, zero_comp], },
  end, }

end biproducts

instance [has_finite_biproducts C] : has_finite_biproducts (karoubi C) :=
{ has_biproducts_of_shape := Œª J hJ1 hJ2,
  { has_biproduct := Œª F, begin
      letI := hJ2,
      apply has_biproduct_of_total (biproducts.bicone F),
      ext1, ext1,
      simp only [id_eq, comp_id, biproducts.bicone_X_p,
        limits.biproduct.Œπ_map],
      rw [sum_hom, comp_sum],
      rw finset.sum_eq_single j, rotate,
      { intros j' h1 h2,
        simp only [biproduct.Œπ_map, biproducts.bicone_Œπ_f, biproducts.bicone_œÄ_f, assoc, comp, biproduct.map_œÄ],
        slice_lhs 1 2 { rw biproduct.Œπ_œÄ, },
        split_ifs,
        { exfalso, exact h2 h.symm, },
        { simp only [zero_comp], } },
      { intro h1,
        exfalso,
        simpa only [finset.mem_univ, not_true] using h1, },
      simp only [biproducts.bicone_œÄ_f, comp,
        biproduct.Œπ_map, assoc, biproducts.bicone_Œπ_f, biproduct.map_œÄ],
      slice_lhs 1 2 { rw biproduct.Œπ_œÄ, },
      split_ifs, swap, { exfalso, exact h rfl, },
      simp only [eq_to_hom_refl, id_comp, (F j).idempotence],
    end, } }

end karoubi

open karoubi

theorem karoubi_is_pseudoabelian : is_pseudoabelian (karoubi C) :=
{ idempotents_have_kernels := Œª P, begin
    have h := P.idempotence,
    simp only [hom_ext, comp] at h,
    let Q : karoubi C := ‚ü®P.X.X, P.X.p - P.p.1,
      by { simp only [comp_sub, sub_comp, P.X.idempotence, p_comp, comp_p],
      simp only [comp_sub, sub_comp, P.X.idempotence,
        p_comp, comp_p, sub_zero, sub_self, h], }‚ü©,
    let Œπ : Q ‚ü∂ P.X := ‚ü®P.X.p - P.p.1,
      by simp only [sub_comp, comp_sub, id_comp, p_comp, comp_p,
        P.X.idempotence, h, sub_zero, sub_self],‚ü©,
    refine { exists_limit :=
      ‚ü®{ cone := limits.kernel_fork.of_Œπ Œπ _, is_limit := _ }‚ü© },
    { simp only [hom_eq_zero_iff, comp, sub_comp, p_comp, h, sub_self], },
    { refine is_limit.of_Œπ _ _ _ _ _,
      { intros W g hg,
        refine ‚ü®g.1, _‚ü©,
        simp only [hom_eq_zero_iff, comp] at hg,
        simp only [Q, comp_sub, comp, hg, comp_zero, sub_zero],
        exact g.2, },
      { intros W g hg,
        simp only [hom_eq_zero_iff, comp] at hg,
        simp only [comp, comp_sub, hom_ext, hg, sub_zero, comp_p], },
      { intros W g hg g' hg',
        simpa only [hom_eq_zero_iff, hom_ext, comp, comp_sub, comp_p] using hg', }, }
  end }

instance [is_pseudoabelian C] : ess_surj (to_karoubi C) := ‚ü®Œª P,
begin
  let Q := idempotent_of_id_sub_idempotent P,
  let kernels := (show is_pseudoabelian C, by apply_instance).idempotents_have_kernels,
  haveI : has_kernel Q.p := kernels Q,
  have h := kernel.condition Q.p,
  simp only [idempotent_of_id_sub_idempotent_p, comp_sub, sub_eq_zero] at h,
  erw comp_id at h,  
  use kernel Q.p,
  apply nonempty.intro,
  refine
    { hom := ‚ü®kernel.Œπ Q.p, _‚ü©,
      inv := ‚ü®kernel.lift Q.p P.p _, _‚ü©,
      inv_hom_id' := _,
      hom_inv_id' := _, },
  /- hom is well defined -/
  { erw [‚Üê h, to_karoubi_obj_p, id_comp], },
  /- inv is well defined -/
  { simp only [comp_sub, idempotent_of_id_sub_idempotent_p, sub_eq_zero,
        P.idempotence], erw comp_id, },
  { slice_rhs 2 3 { erw [comp_id], },
    ext,
    simp only [assoc, kernel.lift_Œπ, P.idempotence], },
  /- inv_hom_id' -/
  { ext,
    simp only [equalizer_as_kernel, assoc, kernel.lift_Œπ,
      to_karoubi_obj_p, comp, assoc, id_eq],
    erw [‚Üê h, id_comp], },
  /- hom_inv_id' -/
  { simp only [comp, id_eq, kernel.lift_Œπ], },
end‚ü©

variables (C)

def karoubi_is_equivalence [is_pseudoabelian C] : is_equivalence (to_karoubi C) :=
  equivalence.of_fully_faithfully_ess_surj (to_karoubi C)

namespace karoubi

variables {C}

@[simps]
def functor_extension {D : Type*} [category D] [preadditive D]
  (F : C ‚•§ D) : karoubi C ‚•§ karoubi D :=
{ obj := Œª P, ‚ü®F.obj P.X, F.map P.p, 
    by { rw ‚Üê F.map_comp, congr, exact P.idempotence, }‚ü©,
  map := Œª P Q f, ‚ü®F.map f.1,
    by { simp only [‚Üê F.map_comp], congr, exact f.2, }‚ü©, }

@[simps]
def functor_extension' {D : Type*} [category D] [preadditive D]
  (F : C ‚•§ karoubi D) : karoubi C ‚•§ karoubi D :=
{ obj := Œª P, ‚ü®(F.obj P.X).X, (F.map P.p).1, begin
    have h := congr_arg (Œª (f : P.X ‚ü∂ P.X), F.map f) P.idempotence,
    simpa only [F.map_comp, hom_ext] using h,
  end‚ü©,
  map := Œª P Q f, ‚ü®(F.map f.1).1, begin
    have h := congr_arg (Œª (f : P.X ‚ü∂ Q.X), F.map f) f.2,
    simpa only [F.map_comp, hom_ext] using h,
  end‚ü©, }

@[simp]
def functor_extension'' {D : Type*} [category D] [preadditive D] [is_pseudoabelian D]
  (F : C ‚•§ D) : karoubi C ‚•§ D :=
  functor_extension F ‚ãô (karoubi_is_equivalence D).inverse

@[simp]
lemma to_karoubi_comp_functor_extension' {D : Type*} [category D] [preadditive D]
  (F : C ‚•§ karoubi D) : to_karoubi C ‚ãô karoubi.functor_extension' F = F :=
begin
  apply category_theory.functor.ext,
  { intros X Y f,
    ext,
    dsimp,
    simp only [karoubi.comp, karoubi.eq_to_hom_f, eq_to_hom_refl,
      to_karoubi_obj_p, karoubi.functor_extension'_obj_p, comp_id],
    erw [F.map_id, karoubi.id_eq, ‚Üê (F.map f).comm], },
  { intro X,
    ext,
    { dsimp,
      erw F.map_id,
      simp only [id_comp, karoubi.id_eq, comp_id], },
    { refl, }, },
end

@[simps]
def decomp_id_i (P : karoubi C) : P ‚ü∂ P.X := ‚ü®P.p, by erw [coe_p, comp_id, P.idempotence]‚ü©

@[simps]
def decomp_id_p (P : karoubi C) : (P.X : karoubi C) ‚ü∂ P := ‚ü®P.p, by erw [coe_p, id_comp, P.idempotence]‚ü©

lemma decomp_id (P : karoubi C) :
  ùüô P = (decomp_id_i P) ‚â´ (decomp_id_p P) :=
by { ext, simp only [comp, id_eq, P.idempotence, decomp_id_i, decomp_id_p], }

def nat_trans_eq {D : Type*} [category D] {F G : karoubi C ‚•§ D} (œÜ : F ‚ü∂ G) (P : karoubi C) :
  œÜ.app P = F.map (‚ü®P.p, by erw [coe_p, comp_id, P.idempotence]‚ü© : P ‚ü∂ P.X) ‚â´ œÜ.app P.X
    ‚â´ G.map (‚ü®P.p, by erw [coe_p, id_comp, P.idempotence]‚ü©) :=
begin
  rw [‚Üê œÜ.naturality, ‚Üê assoc, ‚Üê F.map_comp],
  conv { to_lhs, rw [‚Üê id_comp (œÜ.app P), ‚Üê F.map_id], },
  congr,
  apply decomp_id,
end

lemma decomp_p (P : karoubi C) :
  (to_karoubi C).map P.p = (decomp_id_p P) ‚â´ (decomp_id_i P) :=
by { ext, simp only [comp, decomp_id_p_f, decomp_id_i_f, P.idempotence, to_karoubi_map_f], }

def decomp_id_i_to_karoubi (X : C) : decomp_id_i ((to_karoubi C).obj X) = ùüô _ := by { ext, refl, }

def decomp_id_p_to_karoubi (X : C) : decomp_id_p ((to_karoubi C).obj X) = ùüô _ := by { ext, refl, }

def decomp_id_i_naturality {P Q : karoubi C} (f : P ‚ü∂ Q) : f ‚â´ decomp_id_i _ =
  decomp_id_i _ ‚â´ ‚ü®f.f, by erw [comp_id, id_comp]‚ü© :=
by { ext, simp only [comp, decomp_id_i_f, karoubi.comp_p, karoubi.p_comp], }

def decomp_id_p_naturality {P Q : karoubi C} (f : P ‚ü∂ Q) : decomp_id_p P ‚â´ f =
  (‚ü®f.f, by erw [comp_id, id_comp]‚ü© : (P.X : karoubi C) ‚ü∂ Q.X) ‚â´ decomp_id_p Q :=
by { ext, simp only [comp, decomp_id_p_f, karoubi.comp_p, karoubi.p_comp], }

@[simps]
def functor_extension_hom_equiv {D : Type*} [category D] [preadditive D]
  (F G : C ‚•§ D) : (F ‚ü∂ G) ‚âÉ (functor_extension F ‚ü∂ functor_extension G) :=
{ to_fun := Œª œÜ,
  { app := Œª P,
    { f := F.map P.p ‚â´ œÜ.app P.X ‚â´ G.map P.p,
      comm := begin
        simp only [functor_extension_obj_p],
        slice_rhs 1 2 { rw [‚Üê F.map_comp, P.idempotence], },
        slice_rhs 3 4 { rw [‚Üê G.map_comp, P.idempotence], },
      end },
    naturality' := Œª P Q f, begin
      ext,
      simp only [functor_extension_map_f, comp, assoc, nat_trans.naturality_assoc],
      simp only [‚Üê G.map_comp, karoubi.p_comp, ‚Üê assoc, karoubi.comp_p],
    end },
  inv_fun := Œª œà,
  { app := Œª X, (œà.app ((to_karoubi C).obj X)).f,
    naturality' := Œª X Y f, hom_ext.mp (œà.naturality ((to_karoubi C).map f)), },
  left_inv := Œª œÜ, begin
    ext X,
    dsimp,
    simp only [functor.map_id, id_comp, comp_id],
  end,
  right_inv := Œª œà, begin
    ext1,
    ext1 P,
    exact (nat_trans_eq œà P).symm,
  end } 

lemma functor_extension_hom_to_fun_comp {D : Type*} [category D] [preadditive D]
  {F G H : C ‚•§ D} (œÜ : F ‚ü∂ G) (œà : G ‚ü∂ H) :
  (functor_extension_hom_equiv F H).to_fun (œÜ ‚â´ œà) =
  (functor_extension_hom_equiv F G).to_fun œÜ ‚â´ (functor_extension_hom_equiv G H).to_fun œà :=
begin
  ext P,
  simp only [equiv.to_fun_as_coe, functor_extension_hom_equiv_apply_app_f, comp,
    assoc, nat_trans.naturality_assoc, nat_trans.comp_app, ‚Üê H.map_comp, P.idempotence],
end

lemma functor_extension_hom_to_fun_id {D : Type*} [category D] [preadditive D]
  {F : C ‚•§ D} :
  (functor_extension_hom_equiv F F).to_fun (ùüô F) = ùüô _ :=
begin
  ext P,
  simp only [equiv.to_fun_as_coe, functor_extension_hom_equiv_apply_app_f, id_eq,
    nat_trans.id_app, functor_extension_obj_p, id_comp, ‚Üê F.map_comp, P.idempotence],
end

lemma functor_extension_hom_inv_fun_comp {D : Type*} [category D] [preadditive D]
  {F G H : C ‚•§ D} (œÜ : functor_extension F ‚ü∂ functor_extension G) (œà : functor_extension G ‚ü∂ functor_extension H) :
  (functor_extension_hom_equiv F H).inv_fun (œÜ ‚â´ œà) =
  (functor_extension_hom_equiv F G).inv_fun œÜ ‚â´ (functor_extension_hom_equiv G H).inv_fun œà :=
begin
  ext X,
  simp only [comp, nat_trans.comp_app, equiv.inv_fun_as_coe,
    functor_extension_hom_equiv_symm_apply_app],
end

lemma functor_extension_hom_inv_fun_id {D : Type*} [category D] [preadditive D]
  {F : C ‚•§ D} :
  (functor_extension_hom_equiv F F).inv_fun (ùüô (functor_extension F)) = ùüô _ :=
begin
  ext X,
  simp only [to_karoubi_obj_p, id_eq, nat_trans.id_app, functor_extension_obj_p,
    equiv.inv_fun_as_coe, functor_extension_hom_equiv_symm_apply_app, F.map_id X],
end

@[simps]
def functor_extension_iso_equiv {D : Type*} [category D] [preadditive D]
  (F : C ‚•§ D) (G : C ‚•§ D) : (F ‚âÖ G) ‚âÉ (functor_extension F ‚âÖ functor_extension G) :=
{ to_fun := Œª œÜ,
  { hom := (functor_extension_hom_equiv F G).to_fun œÜ.hom,
    inv := (functor_extension_hom_equiv G F).to_fun œÜ.inv,
    hom_inv_id' := by rw [‚Üê functor_extension_hom_to_fun_comp, œÜ.hom_inv_id, functor_extension_hom_to_fun_id],
    inv_hom_id' := by rw [‚Üê functor_extension_hom_to_fun_comp, œÜ.inv_hom_id, functor_extension_hom_to_fun_id], },
  inv_fun := Œª œà,
  { hom := (functor_extension_hom_equiv F G).inv_fun œà.hom,
    inv := (functor_extension_hom_equiv G F).inv_fun œà.inv,
    hom_inv_id' := by rw [‚Üê functor_extension_hom_inv_fun_comp, œà.hom_inv_id, functor_extension_hom_inv_fun_id],
    inv_hom_id' := by rw [‚Üê functor_extension_hom_inv_fun_comp, œà.inv_hom_id, functor_extension_hom_inv_fun_id], },
  left_inv := Œª œÜ, by { ext1, exact (functor_extension_hom_equiv F G).left_inv œÜ.hom, },
  right_inv := Œª œà, by { ext1, exact (functor_extension_hom_equiv F G).right_inv œà.hom, }, }

@[simps]
def to_karoubi_hom_equiv {D : Type*} [category D]
  (F G : karoubi C ‚•§ D) : (F ‚ü∂ G) ‚âÉ (to_karoubi _ ‚ãô F ‚ü∂ to_karoubi _ ‚ãô G) :=
{ to_fun := Œª œÜ,
  { app := Œª X, œÜ.app ((to_karoubi C).obj X),
    naturality' := Œª X Y f, by simp only [nat_trans.naturality, functor.comp_map], },
  inv_fun := Œª œà,
  { app := Œª P, F.map (decomp_id_i P) ‚â´ (œà.app P.X) ‚â´ G.map (decomp_id_p P),
    naturality' := Œª P Q f, by {
      slice_lhs 1 2 { rw [‚Üê F.map_comp], },
      slice_rhs 3 4 { rw [‚Üê G.map_comp], },
      rw [decomp_id_i_naturality, decomp_id_p_naturality,
        F.map_comp, G.map_comp],
      slice_lhs 2 3 { erw œà.naturality, },
      simp only [assoc],
      refl, }, },
  left_inv := Œª œÜ, by { ext P, exact (nat_trans_eq œÜ P).symm, },
  right_inv := Œª œà, begin
    ext X,
    dsimp,
    erw [decomp_id_i_to_karoubi, decomp_id_p_to_karoubi,
      F.map_id, G.map_id, comp_id, id_comp],
  end }

lemma to_karoubi_hom_inv_fun_comp {D : Type*} [category D]
  {F G H : karoubi C ‚•§ D} (œÜ : to_karoubi _ ‚ãô F ‚ü∂ to_karoubi _ ‚ãô G)
  (œà : to_karoubi _ ‚ãô G ‚ü∂ to_karoubi _ ‚ãô  H) :
  (to_karoubi_hom_equiv F H).inv_fun (œÜ ‚â´ œà) =
  (to_karoubi_hom_equiv F G).inv_fun œÜ ‚â´ (to_karoubi_hom_equiv G H).inv_fun œà :=
begin
  ext P,
  dsimp,
  slice_rhs 3 4 { rw [‚Üê G.map_comp, ‚Üê decomp_p], },
  erw œà.naturality P.p,
  slice_rhs 4 5 { erw [‚Üê H.map_comp], },
  simp only [assoc],
  congr,
  ext,
  simp only [decomp_id_p_f, comp, to_karoubi_map_f, P.idempotence],
end

lemma to_karoubi_hom_inv_fun_id {D : Type*} [category D]
  {F : karoubi C ‚•§ D} :
  (to_karoubi_hom_equiv F F).inv_fun (ùüô _) = ùüô _ :=
begin
  ext P,
  simp only [to_karoubi_hom_equiv_symm_apply_app, nat_trans.id_app, equiv.inv_fun_as_coe],
  erw [id_comp, ‚Üê F.map_comp, ‚Üê decomp_id, F.map_id],
end

@[simps]
def to_karoubi_iso_equiv {D : Type*} [category D]
  (F G : karoubi C ‚•§ D) : (F ‚âÖ G) ‚âÉ (to_karoubi _ ‚ãô F ‚âÖ to_karoubi _ ‚ãô G) :=
{ to_fun := Œª œÜ,
  { hom := (to_karoubi_hom_equiv F G).to_fun œÜ.hom,
    inv := (to_karoubi_hom_equiv G F).to_fun œÜ.inv, },
  inv_fun := Œª œà,
  { hom := (to_karoubi_hom_equiv F G).inv_fun œà.hom,
    inv := (to_karoubi_hom_equiv G F).inv_fun œà.inv,
    hom_inv_id' := by rw [‚Üê to_karoubi_hom_inv_fun_comp, iso.hom_inv_id, to_karoubi_hom_inv_fun_id],
    inv_hom_id' := by rw [‚Üê to_karoubi_hom_inv_fun_comp, iso.inv_hom_id, to_karoubi_hom_inv_fun_id], },
  left_inv := Œª œÜ, by { ext P, simp only [equiv.to_fun_as_coe, equiv.symm_apply_apply,
    equiv.inv_fun_as_coe], },
  right_inv := Œª œà, by { ext X, simp only [equiv.to_fun_as_coe, equiv.apply_symm_apply,
    equiv.inv_fun_as_coe], } }

end karoubi

namespace karoubi_karoubi

@[simps]
def inverse : karoubi (karoubi C) ‚•§ karoubi C :=
  { obj := Œª P, ‚ü®P.X.X, P.p.1,
      by simpa only [hom_ext] using P.idempotence‚ü©,
    map := Œª P Q f, ‚ü®f.1.1,
      by simpa only [hom_ext] using f.2‚ü©, }

instance : functor.additive (inverse C) := { }

@[simps]
def unit_iso : ùü≠ (karoubi C) ‚âÖ to_karoubi (karoubi C) ‚ãô inverse C :=
{ hom :=
  { app := Œª P, eq_to_hom (by { cases P, refl, }),
    naturality' := Œª P Q f,
      by { cases P, cases Q, cases f, dsimp [inverse],
        simp only [comp_id, id_comp, hom_ext], }, },
  inv :=
  { app := Œª P, eq_to_hom (by { cases P, refl, }),
    naturality' := Œª P Q f, begin
      cases P,
      cases Q,
      dsimp [inverse],
      simp only [comp_id, id_comp, hom_ext],
    end },
  hom_inv_id' := begin
    ext P,
    cases P,
    dsimp,
    simpa only [id_eq, hom_ext] using P_idempotence,
  end,
  inv_hom_id' := begin
    ext P,
    cases P,
    dsimp,
    simpa only [id_eq, hom_ext] using P_idempotence,
  end, }

@[simps]
def counit_iso : inverse C ‚ãô to_karoubi (karoubi C) ‚âÖ ùü≠ (karoubi (karoubi C)) :=
{ hom := 
  { app := Œª P, ‚ü®‚ü®P.p.1, begin
    have h := P.idempotence,
    simp only [hom_ext, comp] at h,
    erw [‚Üê assoc, h, comp_p],
    end‚ü©,
    begin
      have h := P.idempotence,
      simp only [hom_ext, comp] at h ‚ä¢,
      erw [h, h],
    end‚ü©,
    naturality' := Œª P Q f, begin
      have h := comp_p f,
      have h' := p_comp f,
      simp only [hom_ext] at h h' ‚ä¢,
      erw [h, h'],
    end, },
  inv :=
  { app := Œª P, ‚ü®‚ü®P.p.1, begin
      have h := P.idempotence,
      simp only [hom_ext, comp] at h,
      erw [h, p_comp],
    end‚ü©,
    begin
      have h := P.idempotence,
      simp only [hom_ext, comp] at h ‚ä¢,
      erw [h, h],
    end‚ü©,
    naturality' := Œª P Q f, begin
      have h := comp_p f,
      have h' := p_comp f,
      simp only [hom_ext] at h h' ‚ä¢,
      erw [h, h'],
    end, },
  hom_inv_id' := begin
    ext P,
    dsimp,
    simpa only [hom_ext, id_eq] using P.idempotence,
  end,
  inv_hom_id' := begin
    ext P,
    dsimp,
    simpa only [hom_ext, id_eq] using P.idempotence,
  end, }

end karoubi_karoubi

@[simps]
def karoubi_karoubi_equivalence : karoubi C ‚âå karoubi (karoubi C) :=
{ functor := to_karoubi (karoubi C),
  inverse := karoubi_karoubi.inverse C,
  unit_iso := karoubi_karoubi.unit_iso C,
  counit_iso := karoubi_karoubi.counit_iso C,
  functor_unit_iso_comp' := Œª P, begin
    cases P,
    dsimp [karoubi_karoubi.unit_iso, karoubi_karoubi.counit_iso, to_karoubi],
    simp only [comp, id_eq, subtype.coe_mk, P_idempotence],
  end, }

instance : functor.additive (karoubi_karoubi_equivalence C).functor :=
  by { dsimp, apply_instance, }

instance : functor.additive (karoubi_karoubi_equivalence C).inverse :=
  by { dsimp, apply_instance, }

end pseudoabelian

end category_theory

