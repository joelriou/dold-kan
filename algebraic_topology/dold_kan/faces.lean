/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jo√´l Riou
-/

import algebraic_topology.dold_kan.homotopies
import algebra.big_operators.fin
import data.nat.parity

open nat
open category_theory
open category_theory.limits
open category_theory.category
open category_theory.preadditive
open category_theory.simplicial_object
open_locale simplicial
open_locale big_operators


namespace algebraic_topology

namespace dold_kan

variables {C : Type*} [category C] [preadditive C]
variables {X : simplicial_object C}

structure higher_faces_vanish {Y : C} {n : ‚Ñï} (q : ‚Ñï) (œÜ : Y ‚ü∂ X _[n+1]) : Prop :=
(vanishing : ‚àÄ (j : fin (n+1)), (n+1 ‚â§ (j : ‚Ñï) + q) ‚Üí œÜ ‚â´ X.Œ¥ j.succ = 0)

/-- the map `Œª a, a+i` from `fin` q to `fin n`, when $n=a+q$ -/
@[simp]
def translate_fin {n : ‚Ñï} (a : ‚Ñï) {q : ‚Ñï} (hnaq : n=a+q) (i : fin q) : fin n :=
‚ü®a+(i:‚Ñï), (gt_of_ge_of_gt (eq.ge hnaq) ((add_lt_add_iff_left a).mpr (fin.is_lt i)))‚ü©

@[to_additive]
lemma prod_split {Œ≤ : Type*} [comm_monoid Œ≤] {n a b : ‚Ñï}
  (h : n=a+b) (f : fin(n) ‚Üí Œ≤) :
  ‚àè (i : fin (n)), f i =
  (‚àè (i : fin (a)), f (fin.cast_le (nat.le.intro (eq.symm h)) i)) *
  ‚àè (i : fin (b)), f (translate_fin a h i) :=
begin
  revert f a n,
  induction b with b hb,
  { intros n a hnaq f,
    rw add_zero at hnaq,
    subst hnaq,
    simp only [fin.prod_univ_zero, mul_one],
    congr,
    ext i,
    congr,
    ext,
    rw fin.coe_cast_le, },
  { intros n a h f,
    have h' : n = (a+1)+b := by { rw [h, succ_eq_add_one], linarith, },
    rw [hb h' f, fin.prod_univ_cast_succ, mul_assoc],
    conv { to_rhs, rw fin.prod_univ_succ, },
    congr,
    ext,
    congr' 1,
    ext,
    simp only [translate_fin, fin.coe_mk, fin.coe_succ],
    rw [add_assoc, add_comm 1], }
end

@[to_additive]
lemma prod_trunc {Œ≤ : Type*} [comm_monoid Œ≤] {n a b : ‚Ñï}
  (h : n=a+b) (f : fin(n) ‚Üí Œ≤)
  (hf : ‚àÄ (j : fin (b)), f (translate_fin a h j) = 1) :
  ‚àè (i : fin (n)), f i =
  ‚àè (i : fin (a)), f (fin.cast_le (nat.le.intro (eq.symm h)) i) :=
begin
  rw prod_split h,
  conv { to_lhs, congr, skip, rw fintype.prod_eq_one _ hf, },
  rw mul_one,
end

lemma HœÉœÜ_eq_neg_œÉŒ¥ {Y : C} {n a q : ‚Ñï} (hnaq : n=a+q) {œÜ : Y ‚ü∂ X _[n+1]}
  (v : higher_faces_vanish q œÜ) : œÜ ‚â´ (HœÉ q).f (n+1) =
  - œÜ ‚â´ X.Œ¥ ‚ü®a+1, nat.succ_lt_succ (nat.lt_succ_iff.mpr (nat.le.intro (eq.symm hnaq)))‚ü© ‚â´
  X.œÉ ‚ü®a, nat.lt_succ_iff.mpr (nat.le.intro (eq.symm hnaq))‚ü© :=
begin
  have hnaq_shift : Œ† d : ‚Ñï, n+d=(a+d)+q,
  { intro d, rw [add_assoc, add_comm d, ‚Üê add_assoc, hnaq], },
  rw [HœÉ, homotopy.null_homotopic_map_f (cs_down_succ (n+1)) (cs_down_succ n),
    hœÉ'_eq hnaq (cs_down_succ n), hœÉ'_eq (hnaq_shift 1) (cs_down_succ (n+1))],
  repeat { erw chain_complex.of_d, },
  simp only [alternating_face_map_complex.obj_d, eq_to_hom_refl, comp_id,
    comp_sum, sum_comp, comp_id, comp_add],
  simp only [comp_zsmul, zsmul_comp, ‚Üê assoc, ‚Üê mul_zsmul],
  /- cleaning up the first sum -/
  rw sum_trunc (hnaq_shift 2), swap,
  { rintro ‚ü®k, hk‚ü©,
    let i : fin (n+1) := ‚ü®a+k+1, by linarith‚ü©,
    have eq := v.vanishing i (by { simp only [i, fin.coe_mk], linarith, }),
    have hi : translate_fin (a+2) (hnaq_shift 2) ‚ü®k, hk‚ü© = i.succ,
    { ext, simp only [translate_fin, fin.coe_mk, fin.succ_mk], linarith, },
    rw [hi, eq, zero_comp, zsmul_zero], },
  /- cleaning up the second sum -/
  rw sum_trunc (hnaq_shift 3), swap,
  { rintros ‚ü®k, hk‚ü©,
    simp only [translate_fin, fin.coe_mk, assoc],
    let i : fin (n+1) := ‚ü®a+1+(k : ‚Ñï), by linarith‚ü©,
    have h : fin.cast_succ (‚ü®a+1, by linarith‚ü© : fin(n+1)) < i.succ,
    { simp only [fin.lt_iff_coe_lt_coe, fin.cast_succ_mk, fin.coe_mk, fin.succ_mk],
      linarith, },
    have Œ¥œÉ_rel := Œ¥_comp_œÉ_of_gt X h,
    simp only [fin.cast_succ_mk] at Œ¥œÉ_rel,
    conv at Œ¥œÉ_rel { to_lhs,
      simp only [fin.succ_mk, fin.succ_mk, show a+1+k+1+1 = a+3+k, by linarith], },
    simp only [Œ¥œÉ_rel, ‚Üê assoc, zero_comp, zsmul_zero,
      v.vanishing i (by { simp only [i, fin.coe_mk], linarith, })], },
  /- leaving out three specific terms -/
  conv { to_lhs, congr, skip, rw [fin.sum_univ_cast_succ, fin.sum_univ_cast_succ ], },
  rw fin.sum_univ_cast_succ,
  /- the purpose of the following `simplif` is to create three subgoals in order
    to finish the proof -/
  have simplif : ‚àÄ (a b c d e f : Y ‚ü∂ X _[n+1]), b=f ‚Üí d+e=0 ‚Üí c+a=0 ‚Üí a+b+(c+d+e) =f,
  { intros a b c d e f h1 h2 h3,
    rw [add_assoc c d e, h2, add_zero, add_comm a b, add_assoc,
      add_comm a c, h3, add_zero, h1], },
  apply simplif,
  { /- b=f -/
    have eq : (-1 : ‚Ñ§)^(a+1) * (-1 : ‚Ñ§)^a = -1 := begin
      rw ‚Üê pow_add,
      apply neg_one_pow_of_odd,
      use a,
      linarith,
    end,
    simp only [eq, fin.last, fin.cast_le_mk, fin.coe_mk, neg_smul, one_zsmul], },
  { /- d+e = 0 -/
    let b : fin(n+2) := ‚ü®a+1, nat.succ_lt_succ $ nat.lt_succ_iff.mpr $
      nat.le.intro (eq.symm hnaq)‚ü©,
    have eq1 : X.œÉ b ‚â´ X.Œ¥ (fin.cast_succ b) = ùüô _ := by rw Œ¥_comp_œÉ_self,
    have eq2 : X.œÉ b ‚â´ X.Œ¥ b.succ = ùüô _ := by rw Œ¥_comp_œÉ_succ,
    simp only [b, fin.cast_succ_mk, fin.succ_mk] at eq1 eq2,
    simp only [eq1, eq2, fin.last, assoc, fin.cast_succ_mk, fin.cast_le_mk, fin.coe_mk,
      comp_id, add_eq_zero_iff_eq_neg, ‚Üê neg_zsmul],
    congr,
    ring_exp,
    rw mul_one, },
  { /- c+a = 0 -/
    rw ‚Üê finset.sum_add_distrib,
    apply finset.sum_eq_zero,
    rintros ‚ü®i, hi‚ü© h‚ÇÄ,
    have hia : (‚ü®i, by linarith‚ü© : fin(n+2)) ‚â§ fin.cast_succ (‚ü®a, by linarith‚ü© : fin(n+1)) :=
      by simpa only [fin.le_iff_coe_le_coe, fin.coe_mk, fin.cast_succ_mk, ‚Üê lt_succ_iff] using hi,
    simp only [fin.coe_mk, fin.cast_le_mk, fin.cast_succ_mk, fin.succ_mk, assoc,
      ‚Üê Œ¥_comp_œÉ_of_le X hia, add_eq_zero_iff_eq_neg, ‚Üê neg_zsmul],
    congr,
    ring_exp, },
end

lemma HœÉœÜ_eq_zero {Y : C} {n q : ‚Ñï} (hqn : n<q) {œÜ : Y ‚ü∂ X _[n+1]}
  (v : higher_faces_vanish q œÜ) : œÜ ‚â´ (HœÉ q).f (n+1) = 0 :=
begin
  sorry
end

lemma higher_faces_vanish_ind {Y : C} {n q : ‚Ñï} {œÜ : Y ‚ü∂ X _[n+1]}
  (v : higher_faces_vanish q œÜ) : higher_faces_vanish (q+1) (œÜ ‚â´ (ùüô _ + HœÉ q).f (n+1)) :=
begin
  sorry
end

lemma downgrade_vanishing {Y : C} {n : ‚Ñï} {q : ‚Ñï} {œÜ : Y ‚ü∂ X _[n+1]}
  (v : higher_faces_vanish (q+1) œÜ) : higher_faces_vanish q œÜ :=
{ vanishing := Œª j hj, v.vanishing j (by { rw ‚Üê add_assoc, exact le_add_right hj, }) }

end dold_kan

end algebraic_topology
